@charset "UTF-8";

/*!
 * Animate.css -http://daneden.me/animate
 * Version - 3.4.0
 * Licensed under the MIT license - http://opensource.org/licenses/MIT
 *
 * Copyright (c) 2015 Daniel Eden
 */

@media all and (min-width: $screen-mobile) {

  .animated {
    @include animation-duration(1s);

    -webkit-animation-fill-mode: both;
    -moz-animation-fill-mode: both;
    animation-fill-mode: both;
  }

  .animated {
    &.dur2 {
      @include animation-duration(1.3s);
    }
    &.dur3 {
      @include animation-duration(1.8s);
    }
    &.dur4 {
      @include animation-duration(2s);
    }
    &.dur5 {
      @include animation-duration(2.3s);
    }
    &.dur6 {
      @include animation-duration(2.8s);
    }
  }

  .animated.infinite {
    -webkit-animation-iteration-count: infinite;
    animation-iteration-count: infinite;
  }

  .animated.hinge {
    @include animation-duration(2s);
  }

  .animated.flipOutX,
  .animated.flipOutY,
  .animated.bounceIn,
  .animated.bounceOut {
    @include animation-duration(.75s);
  }

  .fadeIn {
    @include animation-name(fadeIn)
  }

  .fadeInDown {
    @include animation-name(fadeInDown)
  }


  .fadeInUp {
    @include animation-name(fadeInUp)
  }

  .animElemFade {
    opacity: 0;

    &.inview {
      opacity:1;
    }
  }

  .animElem {
    &--dur1 {
      @include animation-duration(1s);
    }
    &--dur2 {
      @include animation-duration(1.2s);
    }
    &--dur3 {
      @include animation-duration(1.2s);
    }
    &--dur4 {
      @include animation-duration(1.4s);
    }
    &--dur5 {
      @include animation-duration(1.5s);
    }
    &--dur6 {
      @include animation-duration(1.65s);
    }
  }

  .ie9 {
    .animated, .features__item {
      opacity: 1;
    }
  }

  .zoomOut {
    .form-control, .btn {
      visibility: hidden;

      @include opacity(0);
      @include transition($all);
    }
  }

  .zoomIn {
    @include transform(scale(1))
  }
}

@include keyframes(fadeIn) {
  from {
    @include opacity(0)
  }

  to {
    @include opacity(1)
  }
}

@include keyframes(fadeInDown) {
  from {
    @include transform(translate3d(0, -100%, 0));
  }

  to {
    @include transform(none);
  }
}


@include keyframes(fadeInUp) {
  from {
    @include transform(translate3d(0, 100%, 0));
  }

  to {
    @include transform(none);
  }
}